{"name":"Mineral.js","tagline":"Yet another Lisp in the browser","body":"# README\r\n\r\nMineral.js is a yet another Lisp on JS started as an exercise after reading \"The Roots of Lisp\" paper by Paul Graham.\r\n\r\n## Primitives\r\n\r\n - `quote`\r\n - `atom`\r\n - `eq?`\r\n - `head`\r\n - `tail`\r\n - `cons`\r\n - `if`\r\n - `lambda`\r\n - `def`\r\n - `apply`\r\n - `externalcall` (to invoke native JS world)\r\n - `backquote` (will be removed)\r\n\r\n## Syntactic Sugar\r\n\r\n - quote `'`, unquote `~`, backquote \\`\r\n - lambda function `(% arg1 arg2 ... argN . s-expression)`\r\n - commenting out a sexp can be done by prepending the sexp with `#` : `(# map f list)`\r\n\r\n## Differences with Lisp\r\n\r\n - `t` is `true`\r\n - `()` is `false`\r\n - `cond` is `if` with intuitive semantics: `(if guard then-action  else-action)`\r\n - `car` is `head`\r\n - `cdr` is `tail`\r\n - `label` is `def`\r\n - `eq` is `eq?`\r\n\r\n## Interoperability with JS\r\n\r\nAll references to JS objects and top level functions should be qualified with a `js/` prefix:\r\n\r\n    (js/alert \"hello world!\")\r\n    (.log js/console \"hello world!\")\r\n\r\nProperties are accessed just as functions for a read:\r\n\r\n    (.value (.getElementById js/document \"someId\")) ; returns the value of 'someId' element\r\n\r\nand can be set by using them as functions with arguments:\r\n\r\n    (.value (.getElementById js/document \"someId\") \"hey\") ; sets the value of 'someId' to \"hey\"\r\n\r\n## File Loading\r\n\r\nMineral code can be written in `\\*.mrl` files which will be then loaded using `loadFiles()`.\r\nExample:\r\n\r\n    <body onload=\"loadFiles('mrl/mineral.mrl', 'mrl/tests.mrl')\">\r\n","google":"UA-39551441-1","note":"Don't delete this file! It's used internally to help with page regeneration."}