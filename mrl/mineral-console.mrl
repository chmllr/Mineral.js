(def mineral-console
  (.getElementById js/document "mineralConsole"))

(defn get-cmds []
  (.commands js/localStorage))

(if (not (get-cmds))
  (.commands js/localStorage ""))

(defn append-cmd [cmd]
  (.commands js/localStorage
             (str (get-cmds) "::" cmd)))

(defn set-pointer [n]
  (.pointer js/localStorage n))

(defn get-pointer []
  (| 0 (.pointer js/localStorage)))

(defmacro move-pointer [op]
  `(let [p (get-pointer)
         np (~op p 1)]
     (do
       (if (and (<= 0 np) (< np (count (cmds-list))))
         (set-pointer np))
       np)))

(defn cmds-list []
  (tail (.split (get-cmds) "::")))

(set-pointer (count (cmds-list)))

(defn insert-last-command ()
  (let [code (.keyCode js/event)
        content (.value mineral-console)
        position (+ 2 (.lastIndexOf content ">"))
        arrows-pressed (or (eq? code 38) (eq? code 40))
        index (if arrows-pressed
                (if (eq? code 38) (move-pointer -) (move-pointer +)))
        cmds (cmds-list)]
    (if arrows-pressed
      (do
        (.value mineral-console
                (str (substr content 0 position) 
                     (if (and (>= index 0) (< index (count cmds)))
                       (nth cmds index) "")))
        (.preventDefault js/event)
        false)
      true)))

(defn process-command ()
  (if (eq? (.keyCode js/event) 13)
    (let [content (.value mineral-console)
          position (+ 2 (.lastIndexOf content ">"))
          last-cmd (.slice content position)]
      (do
        (append-cmd last-cmd)
        (set-pointer (count (cmds-list)))
        (.value mineral-console (str content "\n" (js/interpret last-cmd) "\n> "))
        (.scrollTop mineral-console (.scrollHeight mineral-console))
        (.preventDefault js/event)
        false))
    true))
