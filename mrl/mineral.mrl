; this file contains all core function of Mineral

; MACROS

(def defmacro
    (macro 
        (name args body)
        `(def ~name
            (macro ~args ~body))))

(def defn
    (macro 
        (name args body)
        `(def ~name
            (lambda ~args ~body))))

(defmacro let
    (args exp)
    ((% bindings values . `(apply (lambda ~bindings ~exp) '~values))
        ((% x y . y)
            ; TODO: remove def f!!!
            (defn f (op list)
                (if (empty? list) () 
                    (cons (op list) 
                          (f op (tail (tail list))))))
            (f head args))
            (f second args)))

; LISTS

(defn second (list) (head (tail list)))

(defn third (list) (head (tail (tail list))))

(defn empty?
    (list)
    (eq list ()))

(defn
    reduce (f memo list)
    (if (empty? list)
        memo
        (reduce f
            (f memo (head list))
            (tail list))))

(defn
    reduce-right (f memo list)
    (if (empty? list)
        memo
        (f (head list) (reduce-right f memo (tail list)))))

(defn
    map (f list)
    (if (empty? list) 
        ()
        (cons
            (f (head list))
            (map f (tail list)))))

; STRINGS

(defn
    str (& strings)
    (reduce-right 
        (% elem memo . (.concat (stringify elem) memo))
        ""
        strings))

(defn
    console-log (string)
    (.log console string))

(defn
    console-error (string)
    (.error console string))