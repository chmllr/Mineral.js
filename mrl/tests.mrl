(def tests '(
    1   'a a
    2   '(a b c) (a b c)
    3   (atom 'a) true
    4   (atom '(a b c)) false
    5   (atom '()) true
    6   (atom (atom 'a)) true
    7   (atom '(atom 'a)) false
    8   (= 'a 'a) true
    9   (= 'a 'b) false
    10  (= '() '()) true
    11  (head '(a b c)) a
    12  (tail '(a b c)) (b c)
    13  (cons 'a '(b c)) (a b c)
    14  (cons 'a (cons 'b (cons 'c '()))) (a b c)
    15  (cons 'a ()) (a)
    16  (cons 'a '()) (a)
    17  (if (= 'a 'b) 'first 'second) second
    18  (if (= () ()) 'first 'second) first
    19  ((% x . (cons x '(b))) 'a) (a b)
    20  ((% x y . (cons x (tail y))) 'z '(a b c)) (z b c)
    21  ((% f . (f '(b c))) (% x . (cons 'a x))) (a b c)
    22  ((def subst 
           (% x y z . 
              (if (atom z) 
                (if (= z y) x z) 
                (cons (subst x y (head z))
                      (subst x y (tail z))))))
           'm 'b '(a b (a b c) d)) (a m (a m c) d)
    23  `() ()
    24  `~() ()
    25  `(cons 'a ()) (cons (quote a) ())
    26  '(cons 'a ()) (cons (quote a) ())
    27  ''(cons 'a ()) (quote (cons (quote a) ()))
    28  `~'a a
    29  `(cons ~(if true 'first 'second) (cons ~(= 'a 'b) ())) (cons first (cons false ()))
    30  ((% x y z . (cons y (cons z ()))) (def f (% x . (= x 'a))) (f 'a) (f 'b)) (true false)
    31  ((macro (x) `(cons ~x '(Z))) 'U) (cons 'U '(Z))
    32  ((% x y . y) (defmacro mycons (a b) `(cons ~a ~b)) (mycons 'T '(S))) (cons 'T '(S))
    33  ((% x y . y) (defn mycons (a b) (cons a b)) (mycons 'T '(S))) (T S)
    34  ((% x y . y) (defn f (a b & more) (cons a more)) (f 'X 'Y 'W 'O 'W)) (X W O W)
    35  ((% x y . y)
            (defn f (& opt) (cons 'OPTIONAL-ARGS opt)) 
            (f 'X 'Y 'W 'O 'W)) (OPTIONAL-ARGS X Y W O W)
    36  (= (tail '(Z)) ()) true
    37  (reduce (% l e . (cons e l)) () '(A B C)) (C B A)
    38  (map (% v . (= v 'X)) '(X Y Z X Q)) (true false false true false)
    39  (.concat "AB" "CD") "\"ABCD\""
    40  "\"test\""  "\"test\""
    41  (cons "hi" (cons "hey" '("hello"))) ("hi" "hey" "hello")
    42  (= "test" 'test) false
    43  (str "con" #_ "comment" "ca" "te" "na" "tion") "\"concatenation\""
    44  (= "test" "test") true
    45  (apply (% x y z . (cons x (cons y z))) '(a b ())) (a b)
    46  (apply str '(true false "test")) "\"truefalsetest\""
    47  ((% x . ((% . x))) 'Z) Z
    48  (apply (% x y . x) '(T F)) T
    49  (apply (% x y . y) '(T F)) F
    50  ((% l . (id (head l))) '('A)) (quote A)
    51  (let (x 'A y ()) (cons x y)) (A)
    52  (last '(a b c d e f g)) g
    53  (map str '(% a #_ (gar bage) . (list a v))) "(\"fn\" \"(a)\" \"(list a v)\")"
    54  (js/stringify '(% a . (list a v))) "\"(fn (a) (list a v))\""
    55  ((% a-b c-d . (cons a-b c-d)) 'x-y ()) (x-y)
    56  ((% y x . x) (def binde-strich 'TEST) binde-strich) TEST
    57  (infixcall '+ 3 4) 7
    58  (infixcall '^ 1 2) 3
    59  (^ 1 2) 3
    60  (+ 111 222) 333
    61  (- 111 222) -111
    62  (* 111 222) 24642
    63  (| 8 1) 9
    64  (^ (^ 23 66) 23) 66
    65  (list #_ any #_ (garbage) #_ 'will 'be 'ignored) (be ignored)
    66  (take 4 '(a b c d e f g)) (a b c d)
    67  (take 4 '(a b)) (a b)
    68  (drop 4 '(a b c d e f g)) (e f g)
    69  (drop 4 '(a b)) ()
    70  (let (x 'A y x) y) A
    71  (let (x 11 y x f (% x . (* x x)) k (f y)) k) 121
    72  (let (x 'A y '(B)) (cons x y)) (A B)
    73  (let (x 'S) (def y x)) S
    74  '[1 2 3 4] (1 2 3 4)
    75  ((fn [a b] (+ a b)) 2 3) 5
    76  ((defn f [a b] (* a b)) 2 3) 6
    77  (and true (= 'a 'a) (= 'a 'b)) false
    78  (or false (= 'c 'a) (not (= 'a 'a))) false
    79  (or false (= 'c 'a) (= 'a 'a)) true
    80  (empty? ()) true
    81  (empty? '(a)) false
    82  (reduce (% m e . (+ m e)) 0 '(1 2 3 4 5 6 7 8 9 10)) 55
    83  (reduce-right (% m e . (* m e)) 1 '(1 2 3 4 5)) 120
    84  (substr "hello world" 0 7) "\"hello w\""
    85  (split-at '(1 2 3 4) 3) ((1 2 3) (4))
    86  (split-at '(1 2 3 4) 8) ((1 2 3 4) ())
    87  (partition 2 '(1 2 3 4 5)) ((1 2) (3 4) (5))
    88  (push 'f '(4 5 f s)) (4 5 f s f)
    89  (range 10) (0 1 2 3 4 5 6 7 8 9 10)
    90  (last (partition 2 (range 99))) (98 99)
    91  (nth (range 5) 3) 3
    92  (count (range 5)) 6
    93  (= '(a b c) '(a b c)) true
    94  ((defn f [n] (if (= 1 n) 1 (* n (f (- n 1))))) 5) 120
    95  (str "a" '(map f "lol") 'c) "\"a(map f \\\"lol\\\")c\""
    96  (get (assoc (hashmap) 'ping 'pong) 'ping) pong
    97  (get (assoc (hashmap) "ping" 'pong) 'ping) pong
    98  (get (assoc (hashmap) "ping" 'pong) "ping") pong
    99  (get (assoc (hashmap) 'ping "pong") 'ping) "\"pong\""
    100 (get (assoc (hashmap) "ping" "pong") "ping") "\"pong\""
    101 (keys (assoc (assoc (hashmap) "c" "d") "a" "b")) ("c" "a")
    102 (keys (dissoc (assoc (assoc {} "c" "d") "a" "b") "c")) ("a")
    103 (get (assoc (assoc (hashmap) 'lol 'haha) 'ping 'pong) 'lol) haha
    104 (get (assoc (hashmap) "ping" 'pong) 'pung) undefined
    105 (nth (range 10) -1) 10
    106 (index-of (concat (range 4) '(a b c)) 4) 4
    107 (filter (% e . (= 0 (% e 2))) (range 6)) (0 2 4 6)
    108 (filter (% x . true) (range 3)) (0 1 2 3)
    109 (reverse '(A B C D)) (D C B A)
    110 (sort '(4 5 1 3 2)) (1 2 3 4 5)
    111 (pop '(A B C D)) (A B C)
    112 (str (hashmap 'a 'b 'c 'd 'e 'f)) "\"{\\\"a\\\" b, \\\"c\\\" d, \\\"e\\\" f}\""
    113 (get (hashmap 'a 'b, 'c 'd, 'e 'f) 'c) d
    114 (= '(1 2 3) '[1, 2, 3]) true
    115 (let (x 'A) x) A
    116 (if () 'A 'B) B
    117 (concat (range 4) '(a b c)) (0 1 2 3 4 a b c)
    118 (str (last (list (def m {'a 1, 'b 2, 'c 3}) (dissoc m 'b) m))) "\"{\\\"a\\\" 1, \\\"c\\\" 3}\""
    119 (get (last (list (def m {}) (set m 'TEST 'SUCC) m)) 'TEST) undefined
    120 (get (last (list (def m {}) (assoc m 'TEST 'SUCC) m)) 'TEST) SUCC
    121 (clone-object 3) 3
    122 (clone-object "asd") "\"asd\""
    123 (clone-object '(1 2 3)) (1 2 3)
    124 (drop 3 (list (def m {'a 4, 'b 3})
                    (def n (clone-object m))
                    (dissoc n 'a)
                    (get m 'a)
                    (get n 'a)
                    (get n 'b))) (4 undefined 3)
    125 (get (last (list (def m {'a 't}) (dissoc m 'a) m)) 'a) undefined
    126 (get (last (list (def m {'a 't}) (remove m 'a) m)) 'a) t
    127 (str (source do)) "\"(defn do (\\\"&\\\" statements) (last statements))\""
    128 ((fn ([x] (cons x ())) ([a b] (+ a b))) 6) (6)
    129 ((fn ([x] (cons x ())) ([a b] (+ a b))) 6 5) 11
    130 `(4 ~(cons 'a '(b c))) (4 (a b c))
    131 `(4 @(cons 'a '(b c))) (4 a b c)

))

(defmacro assert-equal [n input output]
  `(let [actual-output (js/interpret ~input)]
       (if (= ~output actual-output)
        (do 
            (console-log (str "Test " ~n " successful: '"~input "' -> '" ~output "'"))
            true)
        (do
            (console-error (str "Test " ~n " failed: '" ~input "' yields '" 
                actual-output "' instead of '" ~output "'"))
            false))))

(defn process-tests [tests]
  (if tests
    (cons
        (assert-equal (head tests) (second tests) (third tests))
        (process-tests (drop 3 tests))) ()))

(defn run-tests []
  (let [timer-response (timer (process-tests (map str tests)))
        time (get timer-response 'TIME)
        result (get timer-response 'RESULT)
        succeeded (count (filter id result))
        failed (- (count result) succeeded)
        output (str "Tests succeeded: " succeeded ", failed: " failed ". Time: " time)]
    (do
      (console-log output)
      output)))
