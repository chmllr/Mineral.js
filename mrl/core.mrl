; this file contains all core functions of Mineral

; PREPROCESSORS

(def list (fn [& items] items))

(def backquote-helper
  (% args .
     (if args
       (if (atom args) (list 'quote args)
         (if (eq 'unquote (head args))
           (head (tail args))
           (list
             'cons
             (backquote-helper (head args))
             (backquote-helper (tail args)))))
       args)))

(def backquote
  (macro [exp] 
         (list 'backquote-helper (list 'quote exp))))
 
; MACROS

(def macro-template
  (fn [name docstring args body]
    `((% y x . x)
        (def ~name (macro ~args ~body))
        (assoc ~name 'META {'doc ~docstring
                            'source '(defmacro ~name ~args ~body)}))))

(def defmacro
  (macro
    ([name args body] (macro-template name () args body))
    ([name docstring args body] (macro-template name docstring args body))))

(def defn
  (macro 
    [name & variations]
    (apply
      (% variations docstring .
      `((% y x . x)
          (def ~name (fn @variations))
          (assoc ~name 'META {'doc ~docstring
                              'source '(defn ~name @variations)})))
        (if (js/isString (head variations))
          `(~(tail variations) ~(head variations))
          `(~variations ())))))

(defmacro let
  "Classic let macro"
  [args exp]
  (reduce-right
    (% pair memo . `((fn [~(head pair)] ~memo) ~(get pair 1)))
    exp
    (partition 2 args)))

(defmacro assign
  "Assigns a value to an identifier in the local"
  [id value]
  `(def ~id ~value true))

; LISTS CORE

(defn reduce
  "classic reduce / foldl"
  [f memo coll]
  (do
    (while coll
      (assign memo (f memo (head coll)))
      (assign coll (tail coll)))
    memo))

(defn reduce-right 
  "classic foldr"
  [f memo coll]
  (if coll
    (f (head coll) (reduce-right f memo (tail coll)))
    memo))

(defn partition
  "Divides the given list into groups with n elements and returns the groups as a list"
  [n coll]
  (if coll
    (cons (.slice coll 0 n)
          (partition n (.slice coll n)))
    ()))

(defn map
  "Classic map"
  [f coll]
  (let [result []
        _ (while coll
            (.push result (f (head coll)))
            (assign coll (tail coll)))]
        result))

; LOGIC

(defmacro or
  "Returns true if any of the given values is not false"
  [& vals]
  `(reduce (% m e . 
              (if m true e))
           false
           ~(cons 'list vals)))

(defmacro and
  "Returns true if all fo the given values are not false"
  [& vals]
  `(reduce (% m e .
              (if e m false))
           true
           ~(cons 'list vals)))

(defn not
  "Returns false if the given value is not 'true' and false otherwise"
  [value] (if value false true))

; TODO: rename + take care of stack overflow
(defn eq-object
  "Compares atoms and lists"
  [a b]
  (if (atom a) (eq a b)
    (and (eq (head a) (head b))
         (eq-object (tail a) (tail b)))))

(defn =
  "Compares any number of given values"
  [& values]
  (second
    (reduce (% m e .
               (list e 
                     (and (second m) (eq-object e (head m)))))
            (list (head values) true) (tail values))))

; STRINGS

(defn str-primitive
  "Converts anything to string"
  [arg]
  (if (js/isString arg) arg (js/stringify arg)))

(defn str
  "Concatenates given values to a string"
  [& strings]
  (.join (map str-primitive strings) ""))

(defn console-log
  "Prints to the console"
  [string]
  (.log js/console string))

(defn console-error 
  "Prints an error to the console"
  [string]
  (.error js/console string))

(defn substr
  "Returns a substring of the given string"
  [string start end]
  (.slice string start end))

; ARITHMETIC & BIT OPERATIONS

(map (% x . (js/evaluate `(defn ~x (a b) (infixcall '~x a b))))
     '(+ - * / < > >= <= ^ & | %))

; LISTS BONUS

(defn reverse
  "Reverses list using the JS function .reverse()"
  [coll] (.reverse coll))

(defn sort 
  "Sorts a list using the JS function .sort()"
  [coll] (.sort coll))

(defn concat
  "Concatenates two arrays using JS function .concat()"
  [a b] (.concat a b))

(defn push
  "Pushes the given element to the end of the given list non-destructevely"
  [elem coll]
  ((% coll .
      ((% x . coll) (.push coll elem)))
      (.slice coll 0)))

(defn pop
  "Removes the last element of the end of the given list non-destructevely"
  [coll]
  ((% coll .
      ((% x . coll) (.pop coll)))
      (.slice coll 0)))

(defn range
  "Returns a list with all elements between 0 and the specified argument"
  ([n] (range () n))
  ([acc n]
    (do
      (while (<= 0 n)
        (.unshift acc n)
        (assign n (- n 1)))
      acc)))

(defn take
  "Returns the first n elements of the specified collection"
  [n coll] (.slice coll 0 n))

(defn drop
  "Returns a collection without the first n elements of the specified collection"
  [n coll] (.slice coll n))

(defn second 
  "Returns the second element of the specified list"
  [coll] (nth coll 1))

(defn third
  "Returns the third element of the specified list"
  [coll] (nth coll 2))

(defn count
  "Returns the length of the specified list"
  [coll] (.length coll))

(defn nth
  "Returns n'th element of the specified list"
  [coll n]
  (if (<= 0 n)
    (get coll n)
    (get coll (+ (count coll) n))))

(defn filter
  "Classic filter function"
  [p? coll]
  (let [result []
        _ (while coll
            (let [h (head coll)]
              (if (p? h) (.push result h)))
            (assign coll (tail coll)))]
        result))

(defn exclude
  "Inverted filter function"
  [pred coll]
  (filter (% x . (not (pred x))) coll))

(defn index-of
  "Returns the index of the given element in the given collection using JS function .indexOf()"
  [coll elem]
  ; TODO: for non-primitive type use filter with '='
  (.indexOf coll elem))

(defn last
  "Returns the last element of the given list"
  [coll] (nth coll -1))

(defn zip
  "Zipps two lists"
  [a b]
  (let [a (clone a)
        b (clone b)
        result []
        _ (while a
            (assign result (cons (list (.pop a) (.pop b)) result)))]
        result))

; VARIOUS

(defmacro new
  "Returns a new JS object (arguments are not supported yet)"
  [object & args]
    `(.eval js/window 
            (str "new " ~(list 'quote object) "()")))

(defn id 
  "Classic identity function"
  [x] x)

(defn empty?
  "Returns true if the given list is empty and false otherwise"
  [coll] (eq coll ()))

(defn do
  "Executes given statements and returns the value of the last one"
  [& statements]
  (last statements))

(defmacro timer
  "Executes the given expression and returns the execution time in milliseconds"
  [exp]
  `(let [get-time (% . (.getTime (new Date)))
         start (get-time)
         result ~exp
         time (- (get-time) start)]
     {'RESULT result 'TIME (str time "ms")}))

(defn meta
  "Returns the meta information about a declared function"
  [o] (get o 'META))

(defn source
  "Shows the source code of declared function"
  [f] (get (meta f) 'source))

(defn doc
  "Shows the docstring of a declared function"
  [f] (get (meta f) 'doc))

; MAPS

(defn keys
  "Returns all keys of the given hashmap/object"
  [o] (.keys js/Object o))

(defn clone 
  "Returns a deep copy of the specified hashmap/object or list"
  [o]
  (if (atom o) o
    (if (js/isList o)
      (map clone o)
      (reduce (% m k . (assoc m k (clone (get o k)))) {} (keys o)))))

(defn set
  "Adds the specified key-value pair to the given map non-destructevely"
  [m k v]
  (assoc (clone m) k v))

(defn remove
  "Removes the specified key from the given map non-destructevely"
  [m k]
  (dissoc (clone m) k))

; ALIASES

(defn _
  "Alias for console-log"
  [& strings]
  (console-log (apply str strings)))

(defn !
  "Alias for js/alert"
  [& strings]
  (js/alert (apply str strings)))